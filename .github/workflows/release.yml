name: Release CI

on:
  workflow_dispatch:
  push:
    branches: ["main"]
    paths: ["bdlist-backend/**", "bdlist-frontend/**"]

jobs:
  get-next-version:
    name: Get Next Semantic Version
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Install Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 18

      - uses: pnpm/action-setup@v2
        name: Install pnpm
        id: pnpm-install
        with:
          version: ^8.10.0
          run_install: false

      - name: Get pnpm store directory
        id: pnpm-cache
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path)" >> $GITHUB_OUTPUT

      - uses: actions/cache@v3
        name: Setup pnpm cache
        with:
          path: ${{ steps.pnpm-cache.outputs.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install CI dependencies
        run: pnpm install --frozen-lockfile

      - run: pnpx semantic-release --dry-run
        id: get-next-version
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    outputs:
      new-release-published: ${{ steps.get-next-version.outputs.new-release-published }}
      new-release-version: ${{ steps.get-next-version.outputs.new-release-version }}

  transpile-backend:
    name: Transpile TS to JS
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./bdlist-backend

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Install Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 18

      - uses: pnpm/action-setup@v2
        name: Install pnpm
        id: pnpm-install
        with:
          version: 8
          run_install: false

      - name: Get pnpm store directory
        id: pnpm-cache
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path)" >> $GITHUB_OUTPUT

      - uses: actions/cache@v3
        name: Setup pnpm cache
        with:
          path: ${{ steps.pnpm-cache.outputs.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install dependencies
        run: pnpm install

      - name: Transpile TypeScript to JavaScript
        run: pnpm build

      - name: Upload Transpiled Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: transpiled-api
          path: ./bdlist-backend/dist/
          retention-days: 14

  build-react-app:
    name: Build Static React Files
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./bdlist-frontend

    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-node@v3
        with:
          node-version: 18

      - name: Install dependencies
        run: npm install

      - name: Build Frontend
        run: npm run build

      - name: Upload React artifacts
        uses: actions/upload-artifact@v4
        with:
          name: static-react-build
          path: ./bdlist-frontend/dist/
          retention-days: 14

  dockerize-backend:
    name: Dockerize and Push Backend Image
    if: ${{ needs.get-next-version.outputs.new-release-published }}
    needs: [transpile-backend, get-next-version]
    uses: ./.github/workflows/dockerize.yml
    with:
      git-tag: v${{ needs.get-next-version.outputs.new-release-version }}
      working-directory: bdlist-backend
      artifact-name: transpiled-api
      artifact-download-path: bdlist-backend/dist
      image-name: api
      release-candidate: false

  dockerize-frontend:
    name: Dockerize and Push Frontend Image
    if: ${{ needs.get-next-version.outputs.new-release-published }}
    needs: [build-react-app, get-next-version]
    uses: ./.github/workflows/dockerize.yml
    with:
      git-tag: v${{ needs.get-next-version.outputs.new-release-version }}
      working-directory: bdlist-frontend
      artifact-name: static-react-build
      artifact-download-path: bdlist-frontend/dist
      image-name: frontend
      release-candidate: false

  deploy:
    name: Trigger K8s production manifest update in K8s repository
    needs: [dockerize-backend, dockerize-frontend, get-next-version]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.PAT_TOKEN }}
          script: |
            await github.rest.actions.createWorkflowDispatch({
              owner: 'shuttleday',
              repo: 'k8s',
              workflow_id: 'update-production.yml',
              ref: 'main',
              inputs: { 'tag': '${{ needs.get-next-version.outputs.new-release-version }}' }
            })

      - name: Send Discord Notification
        uses: sarisia/actions-status-discord@v1
        if: always()
        with:
          webhook: ${{ secrets.DISCORD_WEBHOOK }}

  semantic-release:
    needs: [deploy]
    permissions:
      contents: write # to be able to publish a GitHub release
      issues: write # to be able to comment on released issues
      pull-requests: write # to be able to comment on released pull requests
    name: Semantic Release
    uses: ./.github/workflows/semantic-release.yml
